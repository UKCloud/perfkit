#!/bin/bash

provider=$1

if [[ "$provider" == "UKCloud-OpenStack" ]]; then
  SERVICE_PROVIDER="UKCloud"
  CLOUD="OpenStack"
  OPENSTACK_NETWORK="perfkit_net"
  FLAVOR="t1.tiny"
  ZONE="0000c-1"
elif [[ "$provider" == "AWS-UK" ]]; then
  SERVICE_PROVIDER="AWS"
  CLOUD="AWS"
  FLAVOR="t2.micro"
  ZONE="eu-west-2"
elif [[ "$provider" == "AWS-US" ]]; then
  SERVICE_PROVIDER="AWS"
  CLOUD="AWS"
  FLAVOR="t2.micro"
  ZONE="us-east-1"
elif [[ "$provider" == "Azure" ]]; then
  SERVICE_PROVIDER="Azure"
  CLOUD="Azure"
  FLAVOR="Standard_A1"
  ZONE="uksouth"
fi

VOLUME_SIZE="20"
NUM_VMS=5
RESULTS_PATH="/opt/results/"
STORAGE_TIERS=(TIER1 TIER2)
DATE=$(date +%d%m%Y)

# DATABASE_BENCHMARKS
# aerospike - noSQL benchmark
# cassandra_stress - noSQL benchmark
# mongodb_ycsb - noSQL benchmark
# sysbench_oltp - SQL benchmark

# STORAGE_BENCHMARKS
# fio - storage benchmark
# block_storage_workload - block storage benchmark
# silo - distributed IO benchmark

# PROVISIONING_BENCHMARKS
# cluster_boot - VM provisioning benchmark

# NETWORK_BENCHMARKS
# copy_throughput - Network benchmark
# iperf - Network benchmark
# ping - Network benchmark
# netperf - Network benchmark

# HPC_BENCHMARKS
# hpcc - HPC benchmark
# mesh_network - HPC network benchmark
# oldisim - OLDI benchmark

# MEMORY_BENCHMARK
# redis - Memory benchmark

# ALLROUND_BENCHMARK
# unixbench - all round benchmark

BENCHMARKS=( aerospike mongodb_ycsb sysbench_oltp fio block_storage_workload silo cluster_boot copy_throughput iperf ping netperf hpcc mesh_network oldisim redis unixbench )

PATH=/usr/local/bin:$PATH

cd /opt/PerfKitBenchmarker
DATE=`date +%M%H%d%m%Y`
source /home/ubuntu/openstack_rc.sh

function baseCmd() {
  benchmark=$1
  if [[ "$provider" == "UKCloud-OpenStack" ]]; then
    cmd='./pkb.py --benchmarks='$benchmark' --cloud=OpenStack --openstack_network='$OPENSTACK_NETWORK' --machine_type='$FLAVOR' --zones='$ZONE' --openstack_volume_size='$VOLUME_SIZE' --data_disk_size='$VOLUME_SIZE' --num_vms='$NUM_VMS' --aerospike_storage_type=disk --ip_addresses=INTERNAL'
  else
    cmd="./pkb.py --benchmarks="$benchmark" --cloud="$CLOUD" --machine_type="$FLAVOR" --zones="$ZONE" --metadata="cloud_provider:$SERVICE_PROVIDER" --data_disk_size="$VOLUME_SIZE" --aerospike_storage_type=disk --num_vms=$NUM_VMS" 
  fi
  echo $cmd
}

function runBenchmarks() {
  for benchmark in ${BENCHMARKS[@]}; do
    if [[ "$provider" == "UKCloud-OpenStack" ]]; then
      if [[ "$benchmark" == "aerospike" ]] || \
         [[ "$benchmark" == "cassandra_stress" ]] || \
         [[ "$benchmark" == "mongodb_ycsb" ]] || \
         [[ "$benchmark" == "sysbench_oltp" ]] || \
         [[ "$benchmark" == "fio" ]] || \
         [[ "$benchmark" == "block_storage_workload" ]] || \
         [[ "$benchmark" == "oldisim" ]] || \
         [[ "$benchmark" == "unixbench" ]]; then
        for tier in ${STORAGE_TIERS[@]}; do
          if [ $benchmark == "block_storage_workload" ]; then
            for workload in logging database streaming; do
              cmd="$(baseCmd $benchmark) --openstack_volume_type=$tier --metadata="cloud_provider:$CLOUD,region:$OS_REGION_NAME,storage_type:$tier" --workload_mode=$workload --json_path="/opt/results/$SERVICE_PROVIDER.$FLAVOR.$benchmark.$workload.$DATE.results.json""
              echo $cmd --image="Ubuntu 14.04 amd64" >> /opt/logs/perfkit.log
              $cmd --image="Ubuntu 14.04 amd64" > /opt/logs/$benchmark.log 2>&1
            done
          elif [ $benchmark == "copy_throughput" ]; then
            for workload in cp dd scp; do
              cmd="$(baseCmd $benchmark) --openstack_volume_type=$tier --metadata="cloud_provider:$CLOUD,region:$OS_REGION_NAME,storage_type:$tier" --workload_mode=$workload --json_path="/opt/results/$SERVICE_PROVIDER.$FLAVOR.$benchmark.$workload.$DATE.results.json""
              echo $cmd --image="Ubuntu 14.04 amd64" >> /opt/logs/perfkit.log
              $cmd --image="Ubuntu 14.04 amd64" > /opt/logs/$benchmark.log 2>&1
            done
          else
            cmd="$(baseCmd $benchmark) --openstack_volume_type=$tier --metadata="cloud_provider:$CLOUD,region:$OS_REGION_NAME,storage_type:$tier" --json_path="/opt/results/$SERVICE_PROVIDER.$FLAVOR.$benchmark.$DATE.results.json""
            echo $cmd --image="Ubuntu 14.04 amd64" >> /opt/logs/perfkit.log
            $cmd --image="Ubuntu 14.04 amd64" --metadata="cloud_provider:$CLOUD,region:$OS_REGION_NAME" > /opt/logs/$benchmark.log 2>&1
          fi
        done
      else
        cmd="$(baseCmd $benchmark) --openstack_volume_type=$tier --metadata="cloud_provider:$CLOUD,region:$OS_REGION_NAME,storage_type:$tier" --json_path="/opt/results/$SERVICE_PROVIDER.$FLAVOR.$benchmark.$DATE.results.json""
        echo $cmd --image="Ubuntu 14.04 amd64" >> /opt/logs/perfkit.log
        $cmd --image="Ubuntu 14.04 amd64" --metadata="cloud_provider:$CLOUD,region:$OS_REGION_NAME" > /opt/logs/$benchmark.log 2>&1
      fi
    elif ! [[ "$provider" == "UKCloud-OpenStack" ]]; then
      if [ $benchmark == "block_storage_workload" ]; then
        for workload in logging database streaming; do
          cmd="$(baseCmd $benchmark) --workload_mode=$workload --json_path="/opt/results/$SERVICE_PROVIDER.$FLAVOR.$benchmark.$workload.$DATE.results.json""
          echo $cmd >> /opt/logs/perfkit.log
          $cmd /opt/logs/$benchmark.log 2>&1
        done
      elif [ $benchmark == "copy_throughput" ]; then
        for workload in cp dd scp; do
          cmd="$(baseCmd $benchmark) --workload_mode=$workload --json_path="/opt/results/$SERVICE_PROVIDER.$FLAVOR.$benchmark.$workload.$DATE.results.json""
          echo $cmd >> /opt/logs/perfkit.log
          $cmd /opt/logs/$benchmark.log 2>&1
        done
      else
        cmd="$(baseCmd $benchmark) --json_path="/opt/results/$SERVICE_PROVIDER.$FLAVOR.$benchmark.$DATE.results.json""
        echo $cmd >> /opt/logs/perfkit.log
        $cmd /opt/logs/$benchmark.log 2>&1
      fi
    fi
  done
}

runBenchmarks
